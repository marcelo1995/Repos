/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
Realizado por: JORGE ENCALADA - DIEGO PANDO VARGAS - CHRISTIAN TORRES
 */
package GUI;

import clases.CreacionTemplate;
import clases.Gestion;
import clases.ProcesosFactory;
import clases.RegistroFactory;

import com.csvreader.CsvReader;

import java.awt.Dimension;
import java.io.BufferedReader;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.ArrayList;
import java.util.List;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import javax.swing.JTable;

public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public static String directorio;

    public static String estado = null;

    public Principal() {

        initComponents();
        jLabel1.setIcon(new ImageIcon(Principal.class.getResource("/imagenes/fondo.jpg")));
        this.ActualizarListaTablas();

        if (new File("filesBD\\datBD.obj").exists()) {
            try {
                ObjectInputStream arch = new ObjectInputStream(new FileInputStream("filesBD\\datBD.obj"));
                Object[] args;
                args = (Object[]) arch.readObject();
                arch.close();

            } catch (IOException | ClassNotFoundException ex) {
                System.out.println("Error Interno");
            }
        }

    }

    public void ActualizarListaTablas() {
        try {
            CsvReader read = new CsvReader("filesBD\\META.bd");
            DefaultListModel modelo = new DefaultListModel();
            while (read.readRecord()) {
                modelo.addElement(read.get(0));
            }
            this.jList3.setModel(modelo);
            read.close();
        } catch (FileNotFoundException ex) {
        } catch (IOException ex) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList<>();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        label5 = new java.awt.Label();
        label2 = new java.awt.Label();
        jButton1 = new javax.swing.JButton();
        jTextField3 = new javax.swing.JTextField();
        mensajesConsola = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setBackground(new java.awt.Color(204, 204, 204));
        jLabel2.setFont(new java.awt.Font("Perpetua Titling MT", 2, 45)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 204, 204));
        jLabel2.setText("sistema de base de datos ");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 670, 50));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/bd.png"))); // NOI18N
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 10, 140, 120));

        jList1.setFont(new java.awt.Font("Tempus Sans ITC", 0, 14)); // NOI18N
        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Crear Tabla:", "CREAR TABLA nombre_tabla CAMPOS campo1, …, campoN CLAVE campoN LONGITUD longitudCampo1, …, longitudCampoN ENCRIPTADO campo1, …, campoN", "Modificar tabla:", "MODIFICAR TABLA nombre_tabla CAMPO nombre_campo POR nombre_campo", "Eliminar Tabla:", "ELIMINAR TABLA nombre_tabla", "Unir Tablas:", "UNIR nombre_tabla1, nombre_tabla2 POR nombre_campo = \"Algo\"" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 180, 390, 110));

        jLabel4.setFont(new java.awt.Font("Trebuchet MS", 2, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(153, 153, 255));
        jLabel4.setText("SUGERENCIAS DE COMANDOS ");
        jLabel4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 70, 330, 40));

        jLabel6.setBackground(new java.awt.Color(102, 204, 255));
        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(153, 0, 51));
        jLabel6.setText("Tablas Creadas");
        jLabel6.setOpaque(true);
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 360, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(153, 153, 255));
        jLabel3.setText("Comandos para Registros");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 140, -1, -1));

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 310, 490, 30));

        jList2.setFont(new java.awt.Font("Tempus Sans ITC", 0, 14)); // NOI18N
        jList2.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Crear Registro:", "INSERTAR EN nombre_tabla VALORES vCampo1 , vCampo2 ,... , vCampoN", "Modificar Registro:", "ACTUALIZAR REGISTRO nombre_tabla CLAVE valorCampoClave CAMPO campo POR valor_campo_nuevo", "Eliminar Registro:", "BORRAR REGISTRO nombre_tabla CLAVE valorCampoClave", "Seleccionar Registro:", "SELECCIONAR DE nombre_tabla DONDE nombre_campo = \"Algo\"" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList2);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 180, 330, 110));

        jList3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList3MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jList3);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 390, 180, 150));

        jButton2.setFont(new java.awt.Font("Tempus Sans ITC", 0, 14)); // NOI18N
        jButton2.setText("Salir");
        jButton2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(0, 102, 102), null, null));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 350, 110, 30));

        jButton3.setFont(new java.awt.Font("Tempus Sans ITC", 0, 14)); // NOI18N
        jButton3.setText("Ejecutar");
        jButton3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(0, 102, 102), null, null));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 350, 110, 30));

        jButton4.setFont(new java.awt.Font("Tempus Sans ITC", 0, 14)); // NOI18N
        jButton4.setText("Limpiar");
        jButton4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(0, 102, 102), null, null));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 350, 110, 30));

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(153, 153, 255));
        jLabel7.setText("Comandos para Tablas");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 140, -1, -1));

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 440, 350, 30));

        label5.setBackground(new java.awt.Color(0, 102, 102));
        label5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        label5.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 18)); // NOI18N
        label5.setForeground(new java.awt.Color(255, 255, 255));
        label5.setText("Escriba su comando:");
        getContentPane().add(label5, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 310, 170, 30));

        label2.setBackground(new java.awt.Color(0, 102, 102));
        label2.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 18)); // NOI18N
        label2.setForeground(new java.awt.Color(255, 255, 255));
        label2.setText("Tiempo de ejecución:");
        getContentPane().add(label2, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 440, 170, 30));

        jButton1.setFont(new java.awt.Font("Tempus Sans ITC", 0, 14)); // NOI18N
        jButton1.setText("Buscar Archivo");
        jButton1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 490, 120, 30));

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 490, 370, 30));

        mensajesConsola.setBackground(new java.awt.Color(0, 153, 153));
        mensajesConsola.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        mensajesConsola.setForeground(new java.awt.Color(204, 0, 51));
        getContentPane().add(mensajesConsola, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 390, 520, 40));

        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 768, 546));

        setSize(new java.awt.Dimension(784, 585));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void Ejecutar() {

        try {

            mensajesConsola.setText("Procesando...");

            estado = null;
            Gestion gestion = new Gestion();
            Object[] arg = {jTextField1.getText()};
            gestion.Peticion(arg);
            this.ActualizarListaTablas();

        } catch (Exception se) {
            mensajesConsola.setText(se.getMessage());

        }

        if (estado != null) {
            //Resultado de la operacion
            mensajesConsola.setText(estado);

            //Actualizar el listado de las tablas
            this.ActualizarListaTablas();

            //Actualizar el historial de los mensajes del sistema
        }
    }


    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        long time_start, time_end;
        time_start = System.currentTimeMillis();
        this.Ejecutar();
        time_end = System.currentTimeMillis();
        jTextField2.setText("Tiempo CPU: " + (time_end - time_start) + " milisegundos");

    }//GEN-LAST:event_jButton3ActionPerformed
    private void Registrar(String nombreTabla, List<String> valoresCampos, String valClave) throws Exception {

        int i = "INSERTAR EN ".length();
        //String nombreTabla = null;
        // List<String> valoresCampos = new ArrayList<>();//lista donde se guardaran los campos
        String comando = "";
        /*
        StringBuffer atributo = new StringBuffer();
        for (int j = 0; j < valores.length(); j++) {
            if (valores.charAt(j) != ',') {
                atributo.append(valores.charAt(j));
            } else {

                valoresCampos.add(atributo.toString());
                atributo = new StringBuffer();
            }
        }
        System.out.println("valoresCampos :" + valoresCampos);
         */   //mano fin codigo

        //Validaciones longitud y numero de campos
        //int nroCampos = - 1;
        String campoClave = null;
        String fileMETA = "filesBD\\META.bd";
        BufferedReader br = null;
        try {
            CsvReader ar = new CsvReader(fileMETA);
            //br = new BufferedReader(new FileReader(fileMETA));
            String line = "";

            while (ar.readRecord()) {
                if (ar.get(0).equals(nombreTabla)) {
                    // nroCampos = ar.getColumnCount() - 4;
                    campoClave = ar.get(2);
                    line = ar.getRawRecord();//obtiene la linea de registro
                }
            }
            //System.out.println("linea:" + line);
            //para la obtencion de los 
            ar.close();
            System.out.println("linea:" + line);
            int inicio = 0, fin = 0;
            for (int t = 0; t < line.length(); t++) {
                if (line.charAt(t) == '*') {
                    inicio = t;
                }
                if (line.charAt(t) == '/') {
                    fin = t;
                }
            }
           
            String longi = line.substring(inicio, fin);
            
            String longiCadena = longi.replace("*", "") + ",";

            

            StringBuffer atributo = new StringBuffer();
            List<Integer> longitudesArchivo = new ArrayList<>();
            for (int l = 0; l < longiCadena.length(); l++) {
                if (longiCadena.charAt(l) != ',') {
                    atributo.append(longiCadena.charAt(l));
                } else {
                    String d = atributo.toString();
                    longitudesArchivo.add(Integer.parseInt(d));
                    atributo = new StringBuffer();
                }
            }
            System.out.println("lista de longitudes:" + longitudesArchivo);
            

            //Valores de campos
//aqui se ingresan los valores de cada campo le meti mano al codigo
            String valores = valClave + ",";
            System.out.println("Llego :" + valores);
            atributo = new StringBuffer();
            int contador = 0;
            for (int j = 0; j < valores.length() - 1; j++) {

                if (valores.charAt(j) != ',') {
                    atributo.append(valores.charAt(j));
                } 
            }

            
            System.out.println("valoresCampos :" + valoresCampos);

        } catch (IOException | NumberFormatException e) {

            throw new Error("Error, algo salio mal con los archivos internos");
        }

        if (/*nroCampos == -1 ||*/campoClave == null) {

            throw new SecurityException("Error interno, no se han encontrado los datos de la tabla especificada");
        }
        //Validacion de que el campo clave no se repita
        try {
//codigo de la encriptacion llamadas a la clase principal
            KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
            keyGenerator.init(128);
            SecretKey key = keyGenerator.generateKey();
            String clave = "Programacion3Grupo2";//clave >= 16 caracteres para la encriptcion
            key = new SecretKeySpec(clave.getBytes(), 0, 16, "AES");
            Cipher aes = Cipher.getInstance("AES/ECB/PKCS5Padding");
            aes.init(Cipher.ENCRYPT_MODE, (java.security.Key) key);
//fin del codigo de la encriptación
            //String clave = "xxxxxxxxxxxxxxxx";//clave >= 16 caracteres
            //longitudesArchivo la lista de las longitudes para cada campo
            CsvReader ar = new CsvReader("filesBD\\" + nombreTabla + ".BD");
            int posicion = -1;
            ar.readRecord();
            for (int k = 0; k < ar.getColumnCount(); k++) {
                //val = va a tener el valor del campo
            //    System.out.println("val: " + ar.get(k));

//ar.get obtiene el nombre del campo                        
//String camp=ar.get(k);
                //if(camp.charAt(camp.length()-1)=='F'){
                //}
                if ((ar.get(k).charAt((ar.get(k)).length() - 1)) == 'T') {
                    String valorEncriptar = valoresCampos.get(k);
                    //aqui debe ir la encriptar la palabra valor encriptar
                    byte[] ValorEncriptado = aes.doFinal(valorEncriptar.getBytes());
                    String encri = "";
                    for (byte b : ValorEncriptado) {
                        encri = encri + Integer.toHexString(0xFF & b);
                        //    System.out.print(Integer.toHexString(0xFF & b));
                    }
                    valoresCampos.set(k, encri);
                    //valoresCampos.remove(k)//borro el elemento
              //      System.out.println("valores a encriptar. " + valorEncriptar);
                }
                if (ar.get(k).equals(campoClave)) {
                    posicion = k;
                }
            }
            //************************CLAVES REPETIDAS************************************************
            
                    while (ar.readRecord()) {
                        if (ar.get(posicion).equals(valoresCampos.get(posicion))) {
                            throw new SecurityException("Error, el valor correspondiente al campo clave ya existe");
                        }
                    }
            //ojo para la validacion
            ar.close();

        } catch (FileNotFoundException ex) {
            throw new Error("Error, algo salio mal con los archivos internos");
        } catch (IOException ex) {
            throw new Error("Error inesperado, algo salio mal");
        }

        /**
         * Solicitud aceptada correctamente
         *
         */
        

        System.out.println("Tabla: " + nombreTabla);
        //aqui creo q deberia ver los campos seleccionados como ENCRIPTADOS 
        //obtener el valor encriptar y luego enviar
        System.out.println("Valores de los campos: " + valoresCampos);
        ArrayList<String> valoresCamp = (ArrayList<String>) (List) valoresCampos;
        //Instanciación a través del Abstract Factory
        ProcesosFactory factory = new RegistroFactory();
        CreacionTemplate crear = factory.creacionProceso();
        Object[] arg = {nombreTabla, valoresCamp};
        crear.operation(arg);

        Principal.estado = "Se agrego el registro a la tabla " + nombreTabla;

        

    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String ruta;
        JFileChooser fch = new JFileChooser();
        fch.showOpenDialog(this);
        File ar = fch.getSelectedFile();
        ruta = ar.getAbsolutePath();

        int contSaltoLinea = 0;
        int cont = 1;
        int aux = 0;
        int aux2 = 0;

        String texto = "";

        String fileMETA = "filesBD\\META.bd";

        long time_start, time_end;
        time_start = System.currentTimeMillis();
        try {
            //CsvReader bf = new CsvReader(ruta);
            BufferedReader bf = new BufferedReader(new FileReader(ruta));
            String nombreTabla = JOptionPane.showInputDialog(null,"Introduzca el nombre de la tabla","Nombre de la tabla",JOptionPane.QUESTION_MESSAGE).toString();
            //String nombreTabla = "ArchivoPrueba3"; //Nombre de la tabla del archivo
            jTextField3.setText(ruta);

            String linea = "CREAR TABLA " + nombreTabla + " CAMPOS ";
            do {
                aux2++;
                texto = bf.readLine(); //Lee la siguiente linea 
                
                /*
                Generacion de la tabla 
                */
                
                StringBuffer camp = new StringBuffer();
                List<String> valores = new ArrayList<>();
                if (aux < 1) {
                    for (int i = 0; i < texto.length(); i++) {
                        char campos[] = texto.toCharArray();
                        if (campos[i] == ',') {
                            
                            valores.add(camp.toString());
                            camp = new StringBuffer();
                            cont++;
                        }else{
                            camp.append(campos[i]);
                        }

                    }
                    
                   
                    linea = linea + texto + " CLAVE "+ valores.get(0) +" LONGITUD ";

                    for (int i = 0; i < cont; i++) {
                        if(i==0){
                            linea = linea + "6,";
                        }else if (i != (cont - 1)) {
                            linea = linea + "5,";
                        } else {
                            linea = linea + "10";
                        }
                    }
                    linea = linea + " ENCRIPTADO "+ valores.get(1);

                    jTextField1.setText("");
                    jTextField1.setText(linea);
                    this.Ejecutar();
                    aux = 1; //para que no vuelva a entrar conforme avanza con los registros
                    texto = bf.readLine();
                }

                // desde aqui empiezo a guardar cada registro
                List<String> valoresCampos = new ArrayList<>();
                StringBuffer val = new StringBuffer();
                String valClave = "";
                if (texto != null && !texto.equals("")) {
                    for (int i = 0; i < texto.length(); i++) {
                        char campos[] = texto.toCharArray();
                        if (campos[i] == ',') {

                            //linea = linea + val + ", ";
                            valClave = valClave + val.toString() + ",";
                            valoresCampos.add(val.toString());
                            val = new StringBuffer();
                            cont++;
                        } else {
                            val.append(campos[i]);

                        }

                    }
                    valClave = valClave + val.toString() + ",";
                    valoresCampos.add(val.toString());

                    Registrar(nombreTabla, valoresCampos, valClave);

                }

            } while (texto != null && !texto.equals(""));
        } catch (Exception e) {
            System.err.println("AVISO: No existe el Archivo****");
        }

        time_end = System.currentTimeMillis();
        jTextField2.setText("Tiempo CPU: " + (time_end - time_start) + " milisegundos");
        

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jList3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList3MouseClicked
        try {
            //Obtener el nombre de la tabla que fue seleccionado
            String nombreTabla = this.jList3.getModel().getElementAt(this.jList3.getSelectedIndex());

            if (nombreTabla.replace(" ", "").isEmpty()) {
                return;
            }

            //Numero de filas y columnas
            File path = new File("filesBD\\" + nombreTabla + ".bd");
            CsvReader reader = new CsvReader("filesBD\\" + nombreTabla + ".bd");
            int filas = 0;
            int columnas = 0;
            while (reader.readRecord()) {
                filas++;
                columnas = reader.getColumnCount();
            }
            filas--;
            reader.close();

            //Conseguir las cabeceras
            reader = new CsvReader("filesBD\\" + nombreTabla + ".bd");
            reader.readRecord();
            String matriz[][] = new String[filas][columnas];
            String cabecera[] = new String[columnas];
            for (int i = 0; i < columnas; i++) {
                cabecera[i] = reader.get(i);

            }
            //Conseguir el cuerpo de la tabla
            int i = 0;
            while (reader.readRecord()) {
                if (!reader.getRawRecord().isEmpty()) {
                    for (int j = 0; j < columnas; j++) {
                        matriz[i][j] = reader.get(j);
                    }
                }
                i++;
            }
            reader.close();
            TablaRegistrada tabla = new TablaRegistrada();
            tabla.setTitle("Consulta de la tabla: " + nombreTabla + ".BD");

            //Creacion de la tabla 
            JTable table = new JTable(matriz, cabecera);
            table.setPreferredScrollableViewportSize(new Dimension(filas, columnas));

            tabla.jScrollPane1.setViewportView(new JTable(matriz, cabecera));
            tabla.setVisible(true);

        } catch (FileNotFoundException ex) {
        } catch (IOException ex) {
        }         // TODO add your handling code here:
    }//GEN-LAST:event_jList3MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        jTextField1.setText("");
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JList<String> jList3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField1;
    public javax.swing.JTextField jTextField2;
    public javax.swing.JTextField jTextField3;
    private java.awt.Label label2;
    private java.awt.Label label5;
    public javax.swing.JLabel mensajesConsola;
    // End of variables declaration//GEN-END:variables
}
